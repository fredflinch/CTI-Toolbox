import requests as req 
import os, json, argparse, csv, time

REQUESTS_PER_MIN = 4
INTERVAL_SECONDS = 60
MAX_REQ_PER_DAY = 500

class ratelimit():
    def __init__(self):
        self.reqperday = MAX_REQ_PER_DAY
        self.ratelimit = {'vol':REQUESTS_PER_MIN, 'interval':INTERVAL_SECONDS}
        self.istate = {'vol':0, 'elapsed':0, 'total': 0, 'current_time': time.time()}
    
    def can_do_request(self, cur_time):
        if (self.istate['total'] >= self.reqperday):
            print("[!] Daily request limit hit [!]")
            return False
        if (self.istate['vol'] < self.ratelimit['vol']):
            self.istate['total'] += 1
            self.istate['vol'] += 1
            return True
        else:
            if (cur_time - self.istate['current_time'] > self.ratelimit['interval']):
                self.istate['vol'] = 1
                self.istate['total'] += 1
                self.istate['current_time'] = cur_time
                return True
            else:
                return False
    
def get_communicatingFiles(ip):
    communicating_hashes = {'ip': ip, 'hashes': []}
    vt_ip_report = "https://www.virustotal.com/api/v3/ip_addresses/{0}/relationships/communicating_files" 
    report = req.get(vt_ip_report.format(ip), headers=AUTH)
    
    if (report.status_code != 200):
        print("[!] ERROR [!]\nResponse returned code {}".format(report.status_code))
        return 0
    
    report = json.loads(report.content.decode("utf-8"))
    file_volume = int(report['meta']['count'])
    if (file_volume == 0): 
        return communicating_hashes
    
    for file in report['data']:
        (communicating_hashes['hashes']).append(file['id'])

    return communicating_hashes    

def save(outfile, data):
    with open(outfile, 'w', newline='') as f:
        writer = csv.writer(f)
        writer.writerow(['ip', 'hashes', 'volume'])
        for x in data:
            if x['hashes'] != []:
                writer.writerow([x['ip'], '\n'.join(x['hashes']), len(x['hashes'])]) 
            else: 
                writer.writerow([x['ip'], '', 0])

if __name__=="__main__":
    p = argparse.ArgumentParser()
    p.add_argument("-i", "--infile", help="Input CSV with IPs to check")
    p.add_argument("-o", "--outfile", help="Filename to save the output to")
    p.add_argument("--apikey", help="(Optional) Specify VT API key - will default to env VTKEY if unspecified")
    args = p.parse_args()

    if (args.apikey is not None):
        APIKEY = args.apikey
    else:
        APIKEY = os.getenv('VTKEY')
    
    AUTH = {'x-apikey':APIKEY}
    
    ips = []    
    if (args.infile is not None and args.outfile is not None):
        with open(args.infile) as f:
            reader = csv.reader(f, delimiter=',')
            for row in reader:
                ips.append(row[0])
        results = []
        counter = 0
        rate_handler = ratelimit()
        while counter < len(ips[1:]):
            if rate_handler.can_do_request(time.time()):
                results.append(get_communicatingFiles(ips[counter+1]))
                counter+=1
            else:
                continue
        
        save(args.outfile, results)